% SISO System Identification Example Script
% This script demonstrates how to perform SISO system identification
% using input-output data in MATLAB with the System Identification Toolbox.
clear;clc;close all;
addpath 'C:\Users\afons\OneDrive - Universidade de Lisboa\Controlo de Plataforma Sismica\uniaxial_table_model'
func_folder  =  'C:\Users\afons\OneDrive - Universidade de Lisboa\Controlo de Plataforma Sismica\uniaxial_table_model\Adapting_Driver_Signal\';
addpath(func_folder);

% Load input drv
input_file_folder ='C:\Users\afons\OneDrive - Universidade de Lisboa\Controlo de Plataforma Sismica\minimesa_data\31-7-2025\tgt and noise drv\';
addpath(input_file_folder);
file = 'pink_noise_40Hz_T3mm_0.drv';
LTF_to_TXT_then_load( file , 'InputFolder', input_file_folder , 'OutputFolder', input_file_folder);
x_drv_T_0=1.4*x_drv_T_0;

% load output acq
file = 'pink_noise_40Hz_T3mm_scl=1.4_0.acq';
LTF_to_TXT_then_load( file , 'InputFolder', input_file_folder , 'OutputFolder', input_file_folder);
int_int_ddx_acq_T = lsim(tf(1,[1 0 0]) , ddx_acq_T,time_acq);

plot(time_acq,x_acq_T,tim)
%%
% --- Step 2: Create an iddata object ---
Ts = time_acq(2);

% Determine lengths
n1 = numel(x_drv_T_0);
n2 = numel(x_acq_T);
nmin = min(n1, n2);
% Truncate both to the shortest length
x_drv_T_0 = x_drv_T_0(1:nmin);
x_acq_T = x_acq_T(1:nmin);
ddx_acq_T = ddx_acq_T(1:nmin);

data = iddata(x_acq_T, x_drv_T_0, Ts);
data.InputName  = 'x_drv_T_0';
data.OutputName = 'x_acq_T';
data.TimeUnit   = 'seconds';

data2 = iddata(int_int_ddx_acq_T, x_drv_T_0, Ts);
data2.InputName  = 'x_drv_T_0';
data2.OutputName = 'int_int_ddx_acq_T';
data2.TimeUnit   = 'seconds';

% --- Step 3: Choose a model structure ---
% Here we estimate a second-order transfer function
% You can also try ARX, ARMAX, OE, BJ, state-space, etc.
numerator_order   = 2;
denominator_order = 2;

tf_model1 = tfest(data, numerator_order, denominator_order);
tf_model2 = tfest(data2, numerator_order, denominator_order);

% Alternative ARX estimation:
% na = 2; nb = 2; nk = 1;  % orders and input delay
% arx_model = arx(data, [na nb nk]);

% --- Step 4: Validate the model ---
% Compare measured output with model output
y1 = lsim(tf_model1, x_drv_T_0, time_acq);
y2 = lsim(tf_model2, x_drv_T_0, time_acq);

figure;
subplot(3,1,1);
plot(time_acq, x_acq_T, 'b', time_acq, y1, 'r--',time_acq, y2, 'm--');
legend('Measured y','Model Output y2');
title('Model Fit');
xlabel('Time (s)');
ylabel('Output');

subplot(3,1,2);
resid(data, tf_model1);
title('Residual Analysis');
subplot(3,1,3);
resid(data, tf_model2);
title('Residual Analysis');


% --- Step 5: Display model information ---
disp('Estimated Transfer Function Model:');
display(tf_model1);
display(tf_model2);

% % --- Optional: Export model for control design ---
%sys_id = tf_model;  % Use 'sys_id' in your controller design

